#Использовать logos
#Использовать asserts

#Использовать ".."

Перем ПарсерКомаднойСтроки;
Перем КаталогИсходников;

Перем юТест;
Перем РаботаСТестами;
Перем Лог;
Перем ЛокальныйПрефикс;
Перем ГлобальныйПрефикс;
Перем Команда;

Перем СчетчикРекурсии;

Функция ПолучитьСписокТестов(Знач Тестирование) Экспорт

	юТест = Тестирование;
	
	СписокТестов = Новый Массив;
	
	СписокТестов.Добавить("ТестДолжен_ПрочитатьПараметрыКомандыИзПеременныхСреды");
	СписокТестов.Добавить("ТестДолжен_ПрочитатьПараметрИменованнаяКоллекцияДляКомандыИзПеременныхСреды");
	СписокТестов.Добавить("ТестДолжен_ПроверитьКомандуСПараметромПоУмолчаниюИГлобальнымПараметромФлагИзПеременныхСреды");
	СписокТестов.Добавить("ТестДолжен_ПолучитьПараметрыКомандыИОтдельныйПараметрФлагИзПеременныхСреды");
	СписокТестов.Добавить("ТестДолжен_ДолженПроверитьРаботуНаСерверСборокИзПеременныхСреды");

	Возврат СписокТестов;
	
КонецФункции

Процедура ПередЗапускомТеста() Экспорт
	
	ПарсерКомаднойСтроки = Новый ПарсерАргументовКоманднойСтроки;
	ПарсерКомаднойСтроки.ИспользоватьПеременныеОкружения();
	Лог = Логирование.ПолучитьЛог("oscript.lib.cmdline");
	Лог.УстановитьУровень(УровниЛога.Отладка);
	
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	
	ПарсерКомаднойСтроки = Неопределено;
	юТест.УдалитьВременныеФайлы();
	Лог = Неопределено;
КонецПроцедуры

Процедура ТестДолжен_ПрочитатьПараметрыКомандыИзПеременныхСреды() Экспорт
	
	ПарсерКомаднойСтроки.ДобавитьИменованныйПараметр("-file", "файл");
	ПарсерКомаднойСтроки.ДобавитьПараметрКоллекция("list", "список параметров");
	
	ВходнойМассивПараметров = Новый Массив;
	
	УстановитьПеременнуюСреды_ПоШаблону("-file","readme.txt");
	УстановитьПеременнуюСреды_ПоШаблону("list","1;2;3");
	
	Результат = ПарсерКомаднойСтроки.Разобрать(ВходнойМассивПараметров);
	
	Значения = Результат;
	
	Утверждения.ПроверитьРавенство("readme.txt", Значения["-file"]);
	Утверждения.ПроверитьРавенство(Тип("Массив"), ТипЗнч(Значения["list"]));
	Утверждения.ПроверитьРавенство("1", Значения["list"][0]);
	Утверждения.ПроверитьРавенство("2", Значения["list"][1]);
	Утверждения.ПроверитьРавенство("3", Значения["list"][2]);
	
	
КонецПроцедуры


Процедура ТестДолжен_ПрочитатьПараметрИменованнаяКоллекцияДляКомандыИзПеременныхСреды() Экспорт
	
	ОписаниеКоманды = ПарсерКомаднойСтроки.ОписаниеКоманды("add", "Добавляет что-то куда-то");
	
	ПарсерКомаднойСтроки.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "file", "файл");
	ПарсерКомаднойСтроки.ДобавитьИменованныйПараметрКоллекцияКоманды(ОписаниеКоманды, "-item", "файл");
	ПарсерКомаднойСтроки.ДобавитьКоманду(ОписаниеКоманды);
	
	ВходнойМассивПараметров = Новый Массив;

	УстановитьПеременнуюСреды_ПоШаблону(Команда,"add");
	УстановитьПеременнуюСреды_ПоШаблону("file","file.txt");
	
	УстановитьПеременнуюСреды_ПоШаблону("-item","1;2;3");
	
	Результат = ПарсерКомаднойСтроки.Разобрать(ВходнойМассивПараметров);
	
	Утверждения.ПроверитьРавенство("add", Результат.Команда);
	
	Значения = Результат.ЗначенияПараметров;
	
	Утверждения.ПроверитьРавенство("file.txt", Значения["file"]);
	Утверждения.ПроверитьРавенство(Тип("Массив"), ТипЗнч(Значения["-item"]));
	Утверждения.ПроверитьРавенство("1", Значения["-item"][0]);
	Утверждения.ПроверитьРавенство("2", Значения["-item"][1]);
	Утверждения.ПроверитьРавенство("3", Значения["-item"][2]);
	
	
КонецПроцедуры


Процедура ТестДолжен_ПроверитьКомандуСПараметромПоУмолчаниюИГлобальнымПараметромФлагИзПеременныхСреды() Экспорт
	
	ПарсерКомаднойСтроки.ДобавитьПараметрФлаг("flag",,Истина);
	
	ОписаниеКоманды = ПарсерКомаднойСтроки.ОписаниеКоманды("test");
	
	ПарсерКомаднойСтроки.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "testpath");
	ПарсерКомаднойСтроки.ДобавитьКоманду(ОписаниеКоманды);
	

	ВходнойМассивПараметров = Новый Массив;
	
	УстановитьПеременнуюСреды_ПоШаблону(Команда,"test");
	УстановитьПеременнуюСреды_ПоШаблону("flag","TRUE");
	
	УстановитьПеременнуюСреды_ПоШаблону("testpath","path-value");
		
	Результат = ПарсерКомаднойСтроки.Разобрать(ВходнойМассивПараметров);
	
	Утверждения.ПроверитьНеравенство(Неопределено, Результат, "Команда должна быть разобрана правильно");
	Утверждения.ПроверитьРавенство("test", Результат.Команда, "Команда");
	Утверждения.ПроверитьРавенство("path-value", Результат.ЗначенияПараметров["testpath"], "Значение позиционного параметра testpath");

	Утверждения.ПроверитьРавенство(Истина, Результат.ЗначенияПараметров["flag"], "Глобальный параметр-флаг flag");
	Утверждения.ПроверитьРавенство(2, Результат.ЗначенияПараметров.Количество());
	
КонецПроцедуры

Процедура ТестДолжен_ПолучитьПараметрыКомандыИОтдельныйПараметрФлагИзПеременныхСреды() Экспорт
	// Лог.УстановитьУровень(УровниЛога.Отладка);
	
	ПарсерКомаднойСтроки.ДобавитьПараметрФлаг("flag",,Истина);
	
	ОписаниеКоманды = ПарсерКомаднойСтроки.ОписаниеКоманды("test");
	
	ПарсерКомаднойСтроки.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "testpath");
	ПарсерКомаднойСтроки.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "mode");
	ПарсерКомаднойСтроки.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "output");
	ПарсерКомаднойСтроки.ДобавитьКоманду(ОписаниеКоманды);
	
	ВходнойМассивПараметров = Новый Массив;
	
	УстановитьПеременнуюСреды_ПоШаблону(Команда,"test");
	УстановитьПеременнуюСреды_ПоШаблону("flag","TRUE");
	УстановитьПеременнуюСреды_ПоШаблону("mode","1");
	УстановитьПеременнуюСреды_ПоШаблону("output","2");
	УстановитьПеременнуюСреды_ПоШаблону("testpath","testpath-value");


	Результат = ПарсерКомаднойСтроки.Разобрать(ВходнойМассивПараметров);
	
	Утверждения.ПроверитьНеравенство(Неопределено, Результат, "Команда должна быть разобрана правильно");
	Утверждения.ПроверитьРавенство("test", Результат.Команда, "Команда");
	Утверждения.ПроверитьРавенство("testpath-value", Результат.ЗначенияПараметров["testpath"], "Значение позиционного параметра");

	Утверждения.ПроверитьРавенство("1", Результат.ЗначенияПараметров["mode"], "Именованный ключ mode");
	Утверждения.ПроверитьРавенство("2", Результат.ЗначенияПараметров["output"], "Именованный ключ output");
	Утверждения.ПроверитьРавенство(Истина, Результат.ЗначенияПараметров["flag"], "Флаг flag");
	Утверждения.ПроверитьРавенство(4, Результат.ЗначенияПараметров.Количество());
	
КонецПроцедуры


Процедура ТестДолжен_ДолженПроверитьРаботуНаСерверСборокИзПеременныхСреды() Экспорт
	// Лог.УстановитьУровень(УровниЛога.Отладка);
	// Делается на bamboo
	УстановитьПеременнуюСреды(ВРег("cmdline_global_prefix"), "BAMBOO_");

	ПарсерКомаднойСтроки = Новый ПарсерАргументовКоманднойСтроки;
	ПарсерКомаднойСтроки.ИспользоватьПеременныеОкружения("TESTAPP_", "SUF_COM");
	ПарсерКомаднойСтроки.ДобавитьПараметрФлаг("flag",,Истина);
	
	ОписаниеКоманды = ПарсерКомаднойСтроки.ОписаниеКоманды("test");
	
	ПарсерКомаднойСтроки.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "testpath");
	ПарсерКомаднойСтроки.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "mode");
	ПарсерКомаднойСтроки.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "output");
	ПарсерКомаднойСтроки.ДобавитьКоманду(ОписаниеКоманды);
	
	ВходнойМассивПараметров = Новый Массив;
		
	
	ПеречитатьПрефиксы(ПарсерКомаднойСтроки); // Для установки переменных окружения в функции УстановитьПеременнуюСреды_ПоШаблону

	УстановитьПеременнуюСреды_ПоШаблону(Команда,"test");
	УстановитьПеременнуюСреды_ПоШаблону("flag","TRUE");
	УстановитьПеременнуюСреды_ПоШаблону("mode","1");
	УстановитьПеременнуюСреды_ПоШаблону("output","2");
	УстановитьПеременнуюСреды_ПоШаблону("testpath","testpath-value");


	Результат = ПарсерКомаднойСтроки.Разобрать(ВходнойМассивПараметров);
	
	Утверждения.ПроверитьНеравенство(Неопределено, Результат, "Команда должна быть разобрана правильно");
	Утверждения.ПроверитьРавенство("test", Результат.Команда, "Команда");
	Утверждения.ПроверитьРавенство("testpath-value", Результат.ЗначенияПараметров["testpath"], "Значение позиционного параметра");
	
	Утверждения.ПроверитьРавенство("1", Результат.ЗначенияПараметров["mode"], "Именованный ключ mode");
	Утверждения.ПроверитьРавенство("2", Результат.ЗначенияПараметров["output"], "Именованный ключ output");
	Утверждения.ПроверитьРавенство(Истина, Результат.ЗначенияПараметров["flag"], "Флаг flag");
	Утверждения.ПроверитьРавенство(4, Результат.ЗначенияПараметров.Количество());
	
КонецПроцедуры



Процедура УстановитьПеременнуюСреды_ПоШаблону(Знач ИмяПеременной,Знач Значение)
	
	ИмяПеременной = СтрЗаменить(ИмяПеременной,"-","_");
	ИтоговоеИмяПеременной = Врег(СтрШаблон("%1%2%3", ГлобальныйПрефикс, ЛокальныйПрефикс, ИмяПеременной));
	УстановитьПеременнуюСреды(ИтоговоеИмяПеременной, Значение);
	
КонецПроцедуры

Процедура ПеречитатьПрефиксы(ПарсерКомаднойСтроки)

	ГлобальныйПрефикс = ПолучитьПеременнуюСреды(ВРег("cmdline_global_prefix"));
	ЛокальныйПрефикс = ПарсерКомаднойСтроки.ПолучитьПрефиксыПеременныхСреды().Локальный;
	Команда = ПарсерКомаднойСтроки.ПолучитьПрефиксыПеременныхСреды().Команда;
	

КонецПроцедуры

УстановитьПеременнуюСреды(ВРег("cmdline_prefix"), "TEST_");
УстановитьПеременнуюСреды(ВРег("cmdline_global_prefix"), "OS");
УстановитьПеременнуюСреды(ВРег("cmdline_command_prefix"), "COMMAND");

ЛокальныйПрефикс = ПолучитьПеременнуюСреды(ВРег("cmdline_prefix"));
ГлобальныйПрефикс = ПолучитьПеременнуюСреды(ВРег("cmdline_global_prefix"));
Команда = ПолучитьПеременнуюСреды(ВРег("cmdline_command_prefix"));
